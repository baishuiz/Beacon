{
  "name": "grunt-template-jasmine-istanbul",
  "description": "Code coverage template mix-in for grunt-contrib-jasmine, using istanbul",
  "version": "0.3.0",
  "keywords": [
    "grunt",
    "template",
    "jasmine",
    "istanbul"
  ],
  "author": {
    "name": "maenu"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/maenu/grunt-template-jasmine-istanbul.git"
  },
  "main": "src/main/js/template.js",
  "dependencies": {
    "istanbul": ">=0.1.30"
  },
  "peerDependencies": {
    "grunt": ">=0.4.0",
    "grunt-contrib-jasmine": ">=0.6.0"
  },
  "devDependencies": {
    "grunt": ">=0.4.0",
    "grunt-contrib-jasmine": ">=0.6.0",
    "grunt-contrib-nodeunit": ">=0.1.2",
    "grunt-contrib-clean": ">=0.4.0",
    "grunt-contrib-yuidoc": ">=0.4.0",
    "grunt-contrib-jshint": ">=0.4.3"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/maenu/grunt-template-jasmine-istanbul/master/LICENSE.txt"
    }
  ],
  "readme": "# Code coverage template mix-in for [grunt-contrib-jasmine](https://github.com/gruntjs/grunt-contrib-jasmine), using [istanbul](https://github.com/gotwarlost/istanbul)\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String | Object | Array`\nMandatory.\n\nIf a `String` is given, it will be used as the path where a HTML report is generated.\nIf an `Object` is given, it must have the properties `type` and `options`, where `type` is a `String` and `options` an `Object`.\n`type` and `options` are used to create the report by passing it to `istanbul`s [`Report.create(type, options)`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/Report.html).\nFor example, if you want to generate a Cobertura report at `bin/coverage/cobertura`, use this:\n\n````js\nreport: {\n\ttype: 'cobertura',\n\toptions: {\n\t\tdir: 'bin/coverage/cobertura'\n\t}\n}\n````\n\nIf an `Array` is given, it must consist of `Object`s of the form just described.\n\nThe supported types are:\n\n * [`html`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/HtmlReport.html)\n * [`text`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextReport.html)\n * [`text-summary`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextSummaryReport.html)\n * [`lcov`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovReport.html)\n * [`lcovonly`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovOnlyReport.html)\n * [`cobertura`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/CoberturaReport.html)\n\n### templateOptions.replace\n\nType: `Boolean`\nDefault: `true`\n\nWhether or not the `src` scripts are replaced by the paths to their instrumented versions.\nThis is useful when you want the mixed-in template to work with the original sources, and you want to serve the instrumented sources by redirecting request on the server side.\n\n### templateOptions.thresholds\nType: `Object`\nDefault: `undefined`\n\nThresholds for any of the metrics that Istanbul measures.\nIf a threshold is not met, a warning is emitted.\nSee example below for available metrics.\n\n### templateOptions.template\nType: `String | Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Examples\n\nThere are multiple examples at a [example repository](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n### Simple\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: {\n\t\t\tsrc: ['src/main/js/*.js'],\n\t\t\toptions: {\n\t\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\t\ttemplateOptions: {\n\t\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\t\treport: 'bin/coverage',\n                    thresholds: {\n                        lines: 75,\n                        statements: 75,\n                        branches: 75,\n                        functions: 90\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### RequireJS\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs).\nNote that you need to configure the `baseUrl` to point to the instrumented sources, as described in the section [below](https://github.com/maenu/grunt-template-jasmine-istanbul#a-single-arequirement).\n\n```js\ngrunt.initConfig({\n    jasmine: {\n        coverage: {\n            src: ['src/main/js/*.js'],\n            options: {\n                specs: ['src/test/js/*.js'],\n                template: require('grunt-template-jasmine-istanbul'),\n                templateOptions: {\n                    coverage: 'bin/coverage/coverage.json',\n                    report: 'bin/coverage',\n                    template: require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: {\n                            baseUrl: '.grunt/grunt-contrib-jasmine/src/main/js/'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### Is it really that easy?\n\nNo.\n\nSetting `baseUrl` to that location may screw up your whole configuration, because paths relative to the original sources are broken.\nTherefore, if this happens to you, instead of directly loading the instrumented sources, set `replace: false`, intercept request to the original sources and redirect them to the instrumented versions.\nYou can do this on both the [client side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-client), or the [server side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-server).\nLook at the corresponding `Grunfile.js` files and be filled with horror: Yes, this is nasty, but it (seems to) works.\n\n## Mixed-in Templates\n\n### The Idea\n\nDo you have another template you want to use, but you also want to collect code coverage at the same time?\nThen you can use a mixed-in template, that's what they are for.\nThe idea behind a mixed-in template is simple:\nIstanbul generates code coverage information by instrumenting the sources before they are run and by generating reports after they have run.\nTherefore this templates acts as a test pre- and post-processor, but it doesn't interfere with the actual running of the tests.\nThis makes it possible to use another template as a mix-in template to run the tests, defined by `templateOptions.template` and can be configured with `templateOptions.templateOptions`.\n\n### A Single Requirement\n\nA mixed-in template needs to load the instrumented sources in order for the coverage reports to be correctly generated.\nThis template copies instrumented versions of the sources to a temporary location at `.grunt/grunt-contrib-jasmine/`.\nIf your mixed-in template simply includes the sources, as the default template does, you don't need to account for that, since this template replaces the `src` option with the paths to the instrumented versions.\nIf your mixed-in template loads the sources differently, e.g. directly from the file system, you may need to reconfigure the mixed-in template.\n\n## Change Log\n * v0.3.0, 02.02.14, fixes #18 and #26, now requires grunt-contrib-jasmine v0.6.0\n * v0.2.6, 02.02.14, merged #13 from @llacroix, windows paths are converted to URIs\n * v0.2.5, 10.08.13, reporter is now moved to and loaded from jasmine's temporary directory, fixes #11\n * v0.2.4, 26.05.13, merged #12 from @kayhadrin, instrumented versions of files loaded via absolute paths on windows are now created at a valid path\n * v0.2.3, 12.05.13, merged `thresholds` from @larsthorup #9 which can abort a build with too low coverage\n * v0.2.2, 11.05.13, added `replace` option, so it can be prevented that the original `src` option is replaced with their instrumented versions\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/maenu/grunt-template-jasmine-istanbul/issues"
  },
  "_id": "grunt-template-jasmine-istanbul@0.3.0",
  "_from": "grunt-template-jasmine-istanbul@"
}
