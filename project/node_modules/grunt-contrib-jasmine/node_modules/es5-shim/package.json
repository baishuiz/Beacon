{
  "name": "es5-shim",
  "version": "2.3.0",
  "description": "ES5 as implementable on previous engines",
  "homepage": "http://github.com/es-shims/es5-shim/",
  "contributors": [
    {
      "name": "Kris Kowal",
      "email": "kris@cixar.com",
      "url": "http://github.com/kriskowal/"
    },
    {
      "name": "Sami Samhuri",
      "email": "sami.samhuri@gmail.com",
      "url": "http://samhuri.net/"
    },
    {
      "name": "Florian SchÃ¤fer",
      "email": "florian.schaefer@gmail.com",
      "url": "http://github.com/fschaefer"
    },
    {
      "name": "Irakli Gozalishvili",
      "email": "rfobic@gmail.com",
      "url": "http://jeditoolkit.com"
    },
    {
      "name": "Kit Cambridge",
      "email": "kitcambridge@gmail.com",
      "url": "http://kitcambridge.github.com"
    },
    {
      "name": "Jordan Harband",
      "email": "ljharb@gmail.com",
      "url": "https://github.com/ljharb/"
    }
  ],
  "bugs": {
    "url": "http://github.com/es-shims/es5-shim/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/es-shims/es5-shim/raw/master/LICENSE"
    }
  ],
  "main": "es5-shim.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/es-shims/es5-shim.git"
  },
  "scripts": {
    "minify": "uglifyjs es5-shim.js --source-map=es5-shim.map -b ascii_only=true,beautify=false > es5-shim.min.js; uglifyjs es5-sham.js --source-map=es5-sham.map -b ascii_only=true,beautify=false > es5-sham.min.js",
    "test": "jasmine-node --matchall tests/spec/"
  },
  "devDependencies": {
    "jasmine-node": "~1.12.0",
    "uglify-js": "~2.4.8"
  },
  "engines": {
    "node": ">=0.2.0"
  },
  "readme": "`es5-shim.js` and `es5-shim.min.js` monkey-patch a JavaScript context to\ncontain all EcmaScript 5 methods that can be faithfully emulated with a\nlegacy JavaScript engine.\n\n`es5-sham.js` and `es5-sham.min.js` monkey-patch other ES5 methods as\nclosely as possible.  For these methods, as closely as possible to ES5\nis not very close.  Many of these shams are intended only to allow code\nto be written to ES5 without causing run-time errors in older engines.\nIn many cases, this means that these shams cause many ES5 methods to\nsilently fail.  Decide carefully whether this is what you want.\n\n\n## Tests\n\nThe tests are written with the Jasmine BDD test framework.\nTo run the tests, navigate to <root-folder>/tests/. \n\nIn order to run against the shim-code, the tests attempt to kill the current \nimplementation of the missing methods. This happens in <root-folder>/tests/helpers/h-kill.js.\nSo in order to run the tests against the built-in methods, invalidate that file somehow\n(comment-out, delete the file, delete the script-tag, etc.).\n\n## Shims\n\n### Complete tests ###\n\n* Array.prototype.every\n* Array.prototype.filter\n* Array.prototype.forEach\n* Array.prototype.indexOf\n* Array.prototype.lastIndexOf\n* Array.prototype.map\n* Array.prototype.some\n* Array.prototype.reduce\n* Array.prototype.reduceRight\n* Array.isArray\n* Date.now\n* Date.prototype.toJSON\n* Function.prototype.bind\n    * :warning: Caveat: the bound function has a prototype property.\n    * :warning: Caveat: bound functions do not try too hard to keep you\n      from manipulating their ``arguments`` and ``caller`` properties.\n    * :warning: Caveat: bound functions don't have checks in ``call`` and\n      ``apply`` to avoid executing as a constructor.\n* Number.prototype.toFixed\n* Object.keys\n* String.prototype.split\n* String.prototype.trim\n* Date.parse (for ISO parsing)\n* Date.prototype.toISOString\n* parseInt\n\n## Shams\n\n* :warning: Object.create\n\n    For the case of simply \"begetting\" an object that inherits\n    prototypically from another, this should work fine across legacy\n    engines.\n\n    :warning: Object.create(null) will work only in browsers that\n    support prototype assignment.  This creates an object that does not\n    have any properties inherited from Object.prototype.  It will\n    silently fail otherwise.\n\n    :warning: The second argument is passed to Object.defineProperties\n    which will probably fail either silently or with extreme predudice.\n\n* :warning: Object.getPrototypeOf\n\n    This will return \"undefined\" in some cases.  It uses `__proto__` if\n    it's available.  Failing that, it uses constructor.prototype, which\n    depends on the constructor property of the object's prototype having\n    not been replaced.  If your object was created like this, it won't\n    work:\n\n        function Foo() {\n        }\n        Foo.prototype = {};\n\n    Because the prototype reassignment destroys the constructor\n    property.\n\n    This will work for all objects that were created using\n    `Object.create` implemented with this library.\n\n* :warning: Object.getOwnPropertyNames\n\n    This method uses Object.keys, so it will not be accurate on legacy\n    engines.\n\n* Object.isSealed\n\n    Returns \"false\" in all legacy engines for all objects, which is\n    conveniently guaranteed to be accurate.\n\n* Object.isFrozen\n\n    Returns \"false\" in all legacy engines for all objects, which is\n    conveniently guaranteed to be accurate.\n\n* Object.isExtensible\n\n    Works like a charm, by trying very hard to extend the object then\n    redacting the extension.\n\n### May fail\n\n* :warning: Object.getOwnPropertyDescriptor\n\n    The behavior of this shim does not conform to ES5.  It should\n    probably not be used at this time, until its behavior has been\n    reviewed and been confirmed to be useful in legacy engines.\n\n* :warning: Object.defineProperty\n\n    In the worst of circumstances, IE 8 provides a version of this\n    method that only works on DOM objects.  This sham will not be\n    installed.  The given version of `defineProperty` will throw an\n    exception if used on non-DOM objects.\n\n    In slightly better circumstances, this method will silently fail to\n    set \"writable\", \"enumerable\", and \"configurable\" properties.\n\n    Providing a getter or setter with \"get\" or \"set\" on a descriptor\n    will silently fail on engines that lack \"__defineGetter__\" and\n    \"__defineSetter__\", which include all versions of IE.\n\n    https://github.com/es-shims/es5-shim/issues#issue/5\n\n* :warning: Object.defineProperties\n\n    This uses the Object.defineProperty shim\n\n* Object.seal\n\n    Silently fails on all legacy engines.  This should be\n    fine unless you are depending on the safety and security\n    provisions of this method, which you cannot possibly\n    obtain in legacy engines.\n\n* Object.freeze\n\n    Silently fails on all legacy engines.  This should be\n    fine unless you are depending on the safety and security\n    provisions of this method, which you cannot possibly\n    obtain in legacy engines.\n\n* Object.preventExtensions\n\n    Silently fails on all legacy engines.  This should be\n    fine unless you are depending on the safety and security\n    provisions of this method, which you cannot possibly\n    obtain in legacy engines.\n\n",
  "readmeFilename": "README.md",
  "_id": "es5-shim@2.3.0",
  "dist": {
    "shasum": "1ea794973a313828d3616e4b45869bb7a2a26830"
  },
  "_from": "es5-shim@~2.3.0",
  "_resolved": "https://registry.npmjs.org/es5-shim/-/es5-shim-2.3.0.tgz"
}
